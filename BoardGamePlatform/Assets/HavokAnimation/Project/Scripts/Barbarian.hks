
g_characterProperties =
{	
	m_idleFidgetMinWait = 10.0
	, m_idleFidgetMaxWait = 40.0
	, m_idleToMoveThreshold = 0.01
	
	,m_randomFidgetInterval = 10
	, m_idleTime = 0.0
}

function g_characterProperties:update()
	self.m_idleTime = self.m_idleTime + hkbGetTimestep();
end

function ShouldMove()
	return (hkbGetVariable("MoveSpeed") >= g_characterProperties.m_idleToMoveThreshold);
end

function ShouldFidget()
	return (hkbIsNodeActive("Idle_Fidget") == false and g_characterProperties.m_idleTime >= g_characterProperties.m_randomFidgetInterval);
end

function DoFidget()
	-- choose my fidget
	local whichFidget = math.random(1,3);
	if (whichFidget == 1) then
		hkbFireEvent("IdleFidgetStart01");
	elseif (whichFidget == 2) then
		hkbFireEvent("IdleFidgetStart02");
	else
		hkbFireEvent("IdleFidgetStart03");
	end
		
	g_characterProperties.m_idleTime = 0;
	randomFidgetInterval = math.random(g_characterProperties.m_idleFidgetMinWait, g_characterProperties.m_idleFidgetMaxWait);
end

-- /////////////////////////////////////////////////////////////////////////////
-- Idle State
-- /////////////////////////////////////////////////////////////////////////////
function onActivateIdle()
	g_characterProperties.m_idleTime = 0;
	g_characterProperties.m_randomFidgetInterval = math.random(g_characterProperties.m_idleFidgetMinWait, g_characterProperties.m_idleFidgetMaxWait);
end

function onUpdateIdle()
	if (ShouldMove()) then
		hkbFireEvent("Move");
	elseif (ShouldFidget()) then
		DoFidget();
	end
end

-- /////////////////////////////////////////////////////////////////////////////
-- Move State
-- /////////////////////////////////////////////////////////////////////////////
function onUpdateMove()	
	-- should we return to idle?
	if (ShouldMove() == false) then
		hkbFireEvent("MoveEnd");
	end
end

-- /////////////////////////////////////////////////////////////////////////////
-- Alive SuperState
-- /////////////////////////////////////////////////////////////////////////////
function onUpdateAlive()
	g_characterProperties:update();
end

