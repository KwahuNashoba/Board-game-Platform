g_characterProperties ={		m_idleFidgetMinWait = 10.0	, m_idleFidgetMaxWait = 40.0	, m_idleToMoveThreshold = 0.01			,m_randomFidgetInterval = 10	, m_idleTime = 0.0}function g_characterProperties:update()	self.m_idleTime = self.m_idleTime + hkbGetTimestep();endfunction ShouldFidget()	return (hkbIsNodeActive("IdleFidget") == false and g_characterProperties.m_idleTime >= g_characterProperties.m_randomFidgetInterval);endfunction DoFidget()	hkbFireEvent("IdleFidget");	--update times	g_characterProperties.m_idleTime = 0;	randomFidgetInterval = math.random(g_characterProperties.m_idleFidgetMinWait, g_characterProperties.m_idleFidgetMaxWait);end-- /////////////////////////////////////////////////////////////////////////////-- Idle State-- /////////////////////////////////////////////////////////////////////////////function onActivateIdle()	g_characterProperties.m_idleTime = 0;	g_characterProperties.m_randomFidgetInterval = math.random(g_characterProperties.m_idleFidgetMinWait, g_characterProperties.m_idleFidgetMaxWait);endfunction onUpdateIdle()	if (ShouldFidget()) then		DoFidget();	endend-- /////////////////////////////////////////////////////////////////////////////-- Alive SuperState-- /////////////////////////////////////////////////////////////////////////////function onUpdateAlive()	g_characterProperties:update();end